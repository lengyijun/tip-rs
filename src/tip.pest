// speical rule in pest
// https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ block_comment | ("//" ~ (!NEWLINE~ ANY)*) }
  block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }

// name of function
// can't begin with digit
id= @{ ASCII_ALPHA  ~ (ASCII_ALPHANUMERIC|"_")* }
  ids= { (id ~ ("," ~ id) * )? }

directFieldWrite={ id ~ "." ~ id }
indirectFieldWrite={"(" ~ expression ~ ")" ~ "." ~ id}
derefWrite={ "*" ~ expression}
  assignableExpression=_{id | directFieldWrite | indirectFieldWrite | derefWrite}

vars = { ("var" ~ ids ~ ";")* }
return_expr = { "return" ~ expression ~ ";"}
output = { "output" ~ expression ~ ";"}
error  = { "error" ~ expression ~ ";"}
    assign = { assignableExpression ~ "=" ~ expression ~ ";"}

if_expr = {"if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)?}
while_expr = {"while" ~ "(" ~ expression ~ ")" ~ statement }
block={ "{" ~ statement* ~ "}" }
    statement=_{ output | error | assign | if_expr | while_expr | block }

function = {
  id
  ~ "("
  ~ ids
  ~ ")"
  ~ "{"
  ~ vars
  ~ statement*
  ~ return_expr
  ~ "}"
}

program={SOI ~ function* ~ EOI}

number=@{"-"? ~ ASCII_DIGIT+}

atom = _{
  fieldAccess |
  funApp |
  number |
  parens |
  pointersExpression |
  input |
  id |
  record
}

input={"input"}

field =_{id ~ ":" ~ expression}
// struct
record = {"{" ~ field ~ ("," ~ field)* ~ "}"}

null={"null"}
alloc={"alloc" ~ expression}
ref_expr ={"&" ~ id}
deref={"*" ~ atom}
pointersExpression=_{null| alloc |ref_expr |deref}

parens=_{ "(" ~ expression ~ ")" }

funApp={ (id| parens) ~  expressions }

fieldAccess={(id|deref|parens) ~ ("." ~ id)+}

expression={atom ~ (operation ~ expression)? }
    expressions=_{"(" ~ ")" | "(" ~ expression ~ ("," ~ expression)* ~ ")" }

operation = _{ add | subtract | multiply | divide | gt | equal }
    add      = { "+" }                                                                                        
    subtract = { "-" }                                                                                        
    multiply = { "*" }                                                                                        
    divide   = { "/" }                                                                                        
    gt       = { ">" }
    equal    = { "==" }

